spring:
    datasource:
        url: jdbc:mysql://localhost:3306/damoa?useSSL=false
        username: 
        password: 

    thymeleaf:
      cache: false

    devtools:
      livereload:
        enabled: true


    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 
              clientSecret: 
              redirectUriTemplate: "{baseUrl}/login/oauth2/code/{registrationId}"
              scope:
                - email
                - profile
            kakao:
              clientId: 
              clientSecret: 
              redirectUriTemplate: "{baseUrl}/login/oauth2/code/{registrationId}"
              scope:
              - profile_nickname
              - profile_image
              - account_email
            naver:
              clientId: 
              clientSecret: 
              redirectUriTemplate: "{baseUrl}/login/oauth2/code/{registrationId}"
              scope:
              - nickname
              - email
              - profile_image
              -
            provider:
              naver:
                authorizationUri: https://nid.naver.com/oauth2.0/authorize
                tokenUri: https://nid.naver.com/oauth2.0/token
                userInfoUri: https://openapi.naver.com/v1/nid/me
                userNameAttribute: response
              kakao:
                authorizationUri: https://kauth.kakao.com/oauth/authorize
                tokenUri: https://kauth.kakao.com/oauth/token
                userInfoUri: https://kapi.kakao.com/v2/user/me
                userNameAttribute: id


app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

